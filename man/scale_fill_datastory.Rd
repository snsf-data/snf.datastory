% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scales.R
\name{scale_fill_datastory}
\alias{scale_fill_datastory}
\alias{scale_color_datastory}
\alias{scale_colour_datastory}
\alias{scale_fill_datastory_1}
\alias{scale_color_datastory_1}
\title{Datastory colour scales for ggplot2}
\usage{
scale_fill_datastory(
  ...,
  palette = "default",
  repeat_col = TRUE,
  reverse = FALSE,
  type = "qual",
  grad_col = "blue",
  aesthetics = "fill"
)

scale_color_datastory(
  ...,
  palette = "default",
  repeat_col = TRUE,
  reverse = FALSE,
  type = "qual",
  grad_col = "blue",
  aesthetics = "color"
)

scale_colour_datastory(
  ...,
  palette = "default",
  repeat_col = TRUE,
  reverse = FALSE,
  type = "qual",
  grad_col = "blue",
  aesthetics = "color"
)

scale_fill_datastory_1(..., guide = NULL)

scale_color_datastory_1(..., guide = NULL)
}
\arguments{
\item{...}{Parameters passed to external functions used to generate the
palette: [discrete_scale()], [scale_fill_gradient()],
[scale_fill_gradient2()], [scale_color_gradient()], or
[scale_color_gradient2()].}

\item{palette}{Character string indicating the datastory colour palette to
use. Only those available in [get_datastory_scheme()] can be used.}

\item{repeat_col}{Logical indicating whether the colour should be repeated
sequentially (`TRUE`) when the palette does not return enough values (the
default). If set to `FALSE`, the number of colours will be extended using
interpolation.}

\item{reverse}{Logical indicating whether the scale should be reversed or
not (the default). Note that when more colours need to be generated, the
the colours are first reversed before before repeated/interpolated (this
allows to get, for a given palette size, consistent colours whatever it is
reversed or not).}

\item{type}{Character string indicating the type of scale used to colour
the data. Four options are available: "qual" (default) for
qualitative/discrete data, "seq" for sequential qualitative/discrete data,
"cont" for continuous data, and "div" for diverging continuous data.}

\item{grad_col}{Character string indicating the colour of the scale. For
sequential scales, you can pick any of "blue", "red", "yellow", "green", or
"violet". For continuous scales, you can choose between "blue" (the default)
and "red": the gradient goes from blue/red 30% to dark blue/red 100%. For
diverging scale, there is a single option: from blue to red or vice versa.}

\item{aesthetics}{Character string or vector of character strings listing the
name(s) of the aesthetic(s) that this scale works with.}

\item{guide}{Argument used to silence by default the legend when plotting a
single colour.}
}
\description{
Fill and colour Datastory scale functions for [ggplot2].
}
\examples{
library(dplyr)
library(ggplot2)
library(forcats)

# Qualitative scale
mpg |>
  ggplot() +
  aes(y = class, fill = class) +
  geom_bar(aes(fill = class)) +
  scale_fill_datastory(type = "qual", guide = guide_legend(reverse = TRUE)) +
  get_datastory_theme(legend_position = "right")

# Sequential scale
mpg |>
  summarise(mean = mean(cty), .by = cyl) |>
  mutate(cyl = fct_reorder(as.character(cyl), mean, .desc = TRUE)) |>
  ggplot() +
  aes(x = cyl, y = mean, fill = cyl) +
  geom_col() +
  scale_fill_datastory(type = "seq") +
  get_datastory_theme()

# Continuous scale
mpg |>
  ggplot() +
  aes(x = cty, y = displ, color = hwy) +
  geom_point() +
  coord_flip() +
  scale_color_datastory(type = "cont") +
  get_datastory_theme()

mpg |>
  mutate(hwy = (hwy - mean(hwy)) / sd(hwy)) |>
  ggplot() +
  aes(x = cty, y = displ, color = hwy) +
  geom_point() +
  scale_color_datastory(type = "div") +
  get_datastory_theme()
library(ggplot2)

mpg |>
ggplot() +
  aes(y = class, fill = "") +
  geom_bar() +
  scale_fill_datastory_1() +
  get_datastory_theme()

library(ggplot2)

mpg |>
ggplot() +
  aes(y = class, x = displ, color = "") +
  geom_point() +
  scale_color_datastory_1() +
  get_datastory_theme()

}
